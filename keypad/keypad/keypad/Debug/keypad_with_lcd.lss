
keypad_with_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000992  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000992  00000a06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00001170  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c4a  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000423  00000000  00000000  00001e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000700  00000000  00000000  000022bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  000029c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000292  00000000  00000000  00002b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007db  00000000  00000000  00002e26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f5 02 	call	0x5ea	; 0x5ea <main>
  8a:	0c 94 c7 04 	jmp	0x98e	; 0x98e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <set_pin_dir>:

#include <avr/io.h>
#include "std_macros.h"
void set_pin_dir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	51 f1       	breq	.+84     	; 0xea <set_pin_dir+0x58>
  96:	83 34       	cpi	r24, 0x43	; 67
  98:	20 f4       	brcc	.+8      	; 0xa2 <set_pin_dir+0x10>
  9a:	81 34       	cpi	r24, 0x41	; 65
  9c:	09 f0       	breq	.+2      	; 0xa0 <set_pin_dir+0xe>
  9e:	7b c0       	rjmp	.+246    	; 0x196 <set_pin_dir+0x104>
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <set_pin_dir+0x1e>
  a2:	83 34       	cpi	r24, 0x43	; 67
  a4:	09 f4       	brne	.+2      	; 0xa8 <set_pin_dir+0x16>
  a6:	3e c0       	rjmp	.+124    	; 0x124 <set_pin_dir+0x92>
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f0       	breq	.+2      	; 0xae <set_pin_dir+0x1c>
  ac:	74 c0       	rjmp	.+232    	; 0x196 <set_pin_dir+0x104>
  ae:	57 c0       	rjmp	.+174    	; 0x15e <set_pin_dir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	69 f4       	brne	.+26     	; 0xce <set_pin_dir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <set_pin_dir+0x30>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <set_pin_dir+0x2c>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	6a bb       	out	0x1a, r22	; 26
  cc:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <set_pin_dir+0x4a>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <set_pin_dir+0x46>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	69 f4       	brne	.+26     	; 0x108 <set_pin_dir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <set_pin_dir+0x6a>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <set_pin_dir+0x66>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
 106:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <set_pin_dir+0x84>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <set_pin_dir+0x80>
 11a:	ba 01       	movw	r22, r20
 11c:	60 95       	com	r22
 11e:	62 23       	and	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	69 f4       	brne	.+26     	; 0x142 <set_pin_dir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <set_pin_dir+0xa4>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <set_pin_dir+0xa0>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	64 bb       	out	0x14, r22	; 20
 140:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 142:	24 b3       	in	r18, 0x14	; 20
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <set_pin_dir+0xbe>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <set_pin_dir+0xba>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 15e:	41 30       	cpi	r20, 0x01	; 1
 160:	69 f4       	brne	.+26     	; 0x17c <set_pin_dir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <set_pin_dir+0xde>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <set_pin_dir+0xda>
 174:	ba 01       	movw	r22, r20
 176:	62 2b       	or	r22, r18
 178:	61 bb       	out	0x11, r22	; 17
 17a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <set_pin_dir+0xf8>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <set_pin_dir+0xf4>
 18e:	ba 01       	movw	r22, r20
 190:	60 95       	com	r22
 192:	62 23       	and	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 198:	82 34       	cpi	r24, 0x42	; 66
 19a:	51 f1       	breq	.+84     	; 0x1f0 <DIO_write+0x58>
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	20 f4       	brcc	.+8      	; 0x1a8 <DIO_write+0x10>
 1a0:	81 34       	cpi	r24, 0x41	; 65
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <DIO_write+0xe>
 1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_write+0x104>
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <DIO_write+0x1e>
 1a8:	83 34       	cpi	r24, 0x43	; 67
 1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_write+0x16>
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <DIO_write+0x92>
 1ae:	84 34       	cpi	r24, 0x44	; 68
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0x1c>
 1b2:	74 c0       	rjmp	.+232    	; 0x29c <DIO_write+0x104>
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 1b6:	41 30       	cpi	r20, 0x01	; 1
 1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	ac 01       	movw	r20, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_write+0x30>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_write+0x2c>
 1cc:	ba 01       	movw	r22, r20
 1ce:	62 2b       	or	r22, r18
 1d0:	6b bb       	out	0x1b, r22	; 27
 1d2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1d4:	2b b3       	in	r18, 0x1b	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x4a>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x46>
 1e6:	ba 01       	movw	r22, r20
 1e8:	60 95       	com	r22
 1ea:	62 23       	and	r22, r18
 1ec:	6b bb       	out	0x1b, r22	; 27
 1ee:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	ac 01       	movw	r20, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_write+0x6a>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_write+0x66>
 206:	ba 01       	movw	r22, r20
 208:	62 2b       	or	r22, r18
 20a:	68 bb       	out	0x18, r22	; 24
 20c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_write+0x84>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_write+0x80>
 220:	ba 01       	movw	r22, r20
 222:	60 95       	com	r22
 224:	62 23       	and	r22, r18
 226:	68 bb       	out	0x18, r22	; 24
 228:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	69 f4       	brne	.+26     	; 0x248 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0xa4>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0xa0>
 240:	ba 01       	movw	r22, r20
 242:	62 2b       	or	r22, r18
 244:	65 bb       	out	0x15, r22	; 21
 246:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	ac 01       	movw	r20, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_write+0xbe>
 252:	44 0f       	add	r20, r20
 254:	55 1f       	adc	r21, r21
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_write+0xba>
 25a:	ba 01       	movw	r22, r20
 25c:	60 95       	com	r22
 25e:	62 23       	and	r22, r18
 260:	65 bb       	out	0x15, r22	; 21
 262:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	69 f4       	brne	.+26     	; 0x282 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_write+0xde>
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_write+0xda>
 27a:	ba 01       	movw	r22, r20
 27c:	62 2b       	or	r22, r18
 27e:	62 bb       	out	0x12, r22	; 18
 280:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 282:	22 b3       	in	r18, 0x12	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	ac 01       	movw	r20, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_write+0xf8>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_write+0xf4>
 294:	ba 01       	movw	r22, r20
 296:	60 95       	com	r22
 298:	62 23       	and	r22, r18
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret

0000029e <DIO_read>:


unsigned char DIO_read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 29e:	82 34       	cpi	r24, 0x42	; 66
 2a0:	f1 f0       	breq	.+60     	; 0x2de <DIO_read+0x40>
 2a2:	83 34       	cpi	r24, 0x43	; 67
 2a4:	20 f4       	brcc	.+8      	; 0x2ae <DIO_read+0x10>
 2a6:	81 34       	cpi	r24, 0x41	; 65
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_read+0xe>
 2aa:	4f c0       	rjmp	.+158    	; 0x34a <DIO_read+0xac>
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <DIO_read+0x1c>
 2ae:	83 34       	cpi	r24, 0x43	; 67
 2b0:	41 f1       	breq	.+80     	; 0x302 <DIO_read+0x64>
 2b2:	84 34       	cpi	r24, 0x44	; 68
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_read+0x1a>
 2b6:	49 c0       	rjmp	.+146    	; 0x34a <DIO_read+0xac>
 2b8:	36 c0       	rjmp	.+108    	; 0x326 <DIO_read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 2ba:	29 b3       	in	r18, 0x19	; 25
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	06 2e       	mov	r0, r22
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_read+0x2a>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_read+0x26>
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	82 23       	and	r24, r18
 2d0:	93 23       	and	r25, r19
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_read+0x3a>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_read+0x36>
		break;
 2dc:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 2de:	26 b3       	in	r18, 0x16	; 22
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	06 2e       	mov	r0, r22
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_read+0x4e>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_read+0x4a>
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	82 23       	and	r24, r18
 2f4:	93 23       	and	r25, r19
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_read+0x5e>
 2f8:	95 95       	asr	r25
 2fa:	87 95       	ror	r24
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_read+0x5a>
		break;
 300:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 302:	23 b3       	in	r18, 0x13	; 19
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	06 2e       	mov	r0, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_read+0x72>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_read+0x6e>
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	82 23       	and	r24, r18
 318:	93 23       	and	r25, r19
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_read+0x82>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_read+0x7e>
		break;
 324:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 326:	20 b3       	in	r18, 0x10	; 16
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	06 2e       	mov	r0, r22
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_read+0x96>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_read+0x92>
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	82 23       	and	r24, r18
 33c:	93 23       	and	r25, r19
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_read+0xa6>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_read+0xa2>
		break;
 348:	08 95       	ret
}


unsigned char DIO_read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 34a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 34c:	08 95       	ret

0000034e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 34e:	82 34       	cpi	r24, 0x42	; 66
 350:	b9 f0       	breq	.+46     	; 0x380 <DIO_toggle+0x32>
 352:	83 34       	cpi	r24, 0x43	; 67
 354:	18 f4       	brcc	.+6      	; 0x35c <DIO_toggle+0xe>
 356:	81 34       	cpi	r24, 0x41	; 65
 358:	c9 f5       	brne	.+114    	; 0x3cc <DIO_toggle+0x7e>
 35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_toggle+0x18>
 35c:	83 34       	cpi	r24, 0x43	; 67
 35e:	e9 f0       	breq	.+58     	; 0x39a <DIO_toggle+0x4c>
 360:	84 34       	cpi	r24, 0x44	; 68
 362:	a1 f5       	brne	.+104    	; 0x3cc <DIO_toggle+0x7e>
 364:	27 c0       	rjmp	.+78     	; 0x3b4 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 366:	2b b3       	in	r18, 0x1b	; 27
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	ac 01       	movw	r20, r24
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_toggle+0x26>
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_toggle+0x22>
 378:	ba 01       	movw	r22, r20
 37a:	62 27       	eor	r22, r18
 37c:	6b bb       	out	0x1b, r22	; 27
		break;
 37e:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 380:	28 b3       	in	r18, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	ac 01       	movw	r20, r24
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_toggle+0x40>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_toggle+0x3c>
 392:	ba 01       	movw	r22, r20
 394:	62 27       	eor	r22, r18
 396:	68 bb       	out	0x18, r22	; 24
		break;
 398:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 39a:	25 b3       	in	r18, 0x15	; 21
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	ac 01       	movw	r20, r24
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_toggle+0x5a>
 3a4:	44 0f       	add	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_toggle+0x56>
 3ac:	ba 01       	movw	r22, r20
 3ae:	62 27       	eor	r22, r18
 3b0:	65 bb       	out	0x15, r22	; 21
		break;
 3b2:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 3b4:	22 b3       	in	r18, 0x12	; 18
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	ac 01       	movw	r20, r24
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_toggle+0x74>
 3be:	44 0f       	add	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_toggle+0x70>
 3c6:	ba 01       	movw	r22, r20
 3c8:	62 27       	eor	r22, r18
 3ca:	62 bb       	out	0x12, r22	; 18
 3cc:	08 95       	ret

000003ce <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 3ce:	82 34       	cpi	r24, 0x42	; 66
 3d0:	61 f0       	breq	.+24     	; 0x3ea <DIO_set_port_direction+0x1c>
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <DIO_set_port_direction+0xe>
 3d6:	81 34       	cpi	r24, 0x41	; 65
 3d8:	69 f4       	brne	.+26     	; 0x3f4 <DIO_set_port_direction+0x26>
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_set_port_direction+0x18>
 3dc:	83 34       	cpi	r24, 0x43	; 67
 3de:	39 f0       	breq	.+14     	; 0x3ee <DIO_set_port_direction+0x20>
 3e0:	84 34       	cpi	r24, 0x44	; 68
 3e2:	41 f4       	brne	.+16     	; 0x3f4 <DIO_set_port_direction+0x26>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 3e6:	6a bb       	out	0x1a, r22	; 26
		break ;
 3e8:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 3ea:	67 bb       	out	0x17, r22	; 23
		break ;
 3ec:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 3ee:	64 bb       	out	0x14, r22	; 20
		break ;
 3f0:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 3f2:	61 bb       	out	0x11, r22	; 17
 3f4:	08 95       	ret

000003f6 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 3f6:	82 34       	cpi	r24, 0x42	; 66
 3f8:	61 f0       	breq	.+24     	; 0x412 <DIO_write_port+0x1c>
 3fa:	83 34       	cpi	r24, 0x43	; 67
 3fc:	18 f4       	brcc	.+6      	; 0x404 <DIO_write_port+0xe>
 3fe:	81 34       	cpi	r24, 0x41	; 65
 400:	69 f4       	brne	.+26     	; 0x41c <DIO_write_port+0x26>
 402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_write_port+0x18>
 404:	83 34       	cpi	r24, 0x43	; 67
 406:	39 f0       	breq	.+14     	; 0x416 <DIO_write_port+0x20>
 408:	84 34       	cpi	r24, 0x44	; 68
 40a:	41 f4       	brne	.+16     	; 0x41c <DIO_write_port+0x26>
 40c:	06 c0       	rjmp	.+12     	; 0x41a <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 40e:	6b bb       	out	0x1b, r22	; 27
		break ;
 410:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 412:	68 bb       	out	0x18, r22	; 24
		break ;
 414:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 416:	65 bb       	out	0x15, r22	; 21
		break ;
 418:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 41a:	62 bb       	out	0x12, r22	; 18
 41c:	08 95       	ret

0000041e <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 41e:	82 34       	cpi	r24, 0x42	; 66
 420:	61 f0       	breq	.+24     	; 0x43a <DIO_read_port+0x1c>
 422:	83 34       	cpi	r24, 0x43	; 67
 424:	18 f4       	brcc	.+6      	; 0x42c <DIO_read_port+0xe>
 426:	81 34       	cpi	r24, 0x41	; 65
 428:	71 f4       	brne	.+28     	; 0x446 <DIO_read_port+0x28>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <DIO_read_port+0x18>
 42c:	83 34       	cpi	r24, 0x43	; 67
 42e:	39 f0       	breq	.+14     	; 0x43e <DIO_read_port+0x20>
 430:	84 34       	cpi	r24, 0x44	; 68
 432:	49 f4       	brne	.+18     	; 0x446 <DIO_read_port+0x28>
 434:	06 c0       	rjmp	.+12     	; 0x442 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 436:	89 b3       	in	r24, 0x19	; 25
		break ;
 438:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 43a:	86 b3       	in	r24, 0x16	; 22
		break ;
 43c:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 43e:	83 b3       	in	r24, 0x13	; 19
		break ;
 440:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 442:	80 b3       	in	r24, 0x10	; 16
		break ;
 444:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 446:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 448:	08 95       	ret

0000044a <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	51 f1       	breq	.+84     	; 0x4a2 <DIO_vconnectpullup+0x58>
 44e:	83 34       	cpi	r24, 0x43	; 67
 450:	20 f4       	brcc	.+8      	; 0x45a <DIO_vconnectpullup+0x10>
 452:	81 34       	cpi	r24, 0x41	; 65
 454:	09 f0       	breq	.+2      	; 0x458 <DIO_vconnectpullup+0xe>
 456:	7b c0       	rjmp	.+246    	; 0x54e <DIO_vconnectpullup+0x104>
 458:	07 c0       	rjmp	.+14     	; 0x468 <DIO_vconnectpullup+0x1e>
 45a:	83 34       	cpi	r24, 0x43	; 67
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_vconnectpullup+0x16>
 45e:	3e c0       	rjmp	.+124    	; 0x4dc <DIO_vconnectpullup+0x92>
 460:	84 34       	cpi	r24, 0x44	; 68
 462:	09 f0       	breq	.+2      	; 0x466 <DIO_vconnectpullup+0x1c>
 464:	74 c0       	rjmp	.+232    	; 0x54e <DIO_vconnectpullup+0x104>
 466:	57 c0       	rjmp	.+174    	; 0x516 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	69 f4       	brne	.+26     	; 0x486 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 46c:	2b b3       	in	r18, 0x1b	; 27
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	ac 01       	movw	r20, r24
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_vconnectpullup+0x30>
 476:	44 0f       	add	r20, r20
 478:	55 1f       	adc	r21, r21
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_vconnectpullup+0x2c>
 47e:	ba 01       	movw	r22, r20
 480:	62 2b       	or	r22, r18
 482:	6b bb       	out	0x1b, r22	; 27
 484:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 486:	2b b3       	in	r18, 0x1b	; 27
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vconnectpullup+0x4a>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vconnectpullup+0x46>
 498:	ba 01       	movw	r22, r20
 49a:	60 95       	com	r22
 49c:	62 23       	and	r22, r18
 49e:	6b bb       	out	0x1b, r22	; 27
 4a0:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 4a2:	41 30       	cpi	r20, 0x01	; 1
 4a4:	69 f4       	brne	.+26     	; 0x4c0 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 4a6:	28 b3       	in	r18, 0x18	; 24
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	ac 01       	movw	r20, r24
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_vconnectpullup+0x6a>
 4b0:	44 0f       	add	r20, r20
 4b2:	55 1f       	adc	r21, r21
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_vconnectpullup+0x66>
 4b8:	ba 01       	movw	r22, r20
 4ba:	62 2b       	or	r22, r18
 4bc:	68 bb       	out	0x18, r22	; 24
 4be:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 4c0:	28 b3       	in	r18, 0x18	; 24
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	ac 01       	movw	r20, r24
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_vconnectpullup+0x84>
 4ca:	44 0f       	add	r20, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_vconnectpullup+0x80>
 4d2:	ba 01       	movw	r22, r20
 4d4:	60 95       	com	r22
 4d6:	62 23       	and	r22, r18
 4d8:	68 bb       	out	0x18, r22	; 24
 4da:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 4dc:	41 30       	cpi	r20, 0x01	; 1
 4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 4e0:	25 b3       	in	r18, 0x15	; 21
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	ac 01       	movw	r20, r24
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_vconnectpullup+0xa4>
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_vconnectpullup+0xa0>
 4f2:	ba 01       	movw	r22, r20
 4f4:	62 2b       	or	r22, r18
 4f6:	65 bb       	out	0x15, r22	; 21
 4f8:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 4fa:	25 b3       	in	r18, 0x15	; 21
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	ac 01       	movw	r20, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_vconnectpullup+0xbe>
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_vconnectpullup+0xba>
 50c:	ba 01       	movw	r22, r20
 50e:	60 95       	com	r22
 510:	62 23       	and	r22, r18
 512:	65 bb       	out	0x15, r22	; 21
 514:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 516:	41 30       	cpi	r20, 0x01	; 1
 518:	69 f4       	brne	.+26     	; 0x534 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 51a:	22 b3       	in	r18, 0x12	; 18
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	ac 01       	movw	r20, r24
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_vconnectpullup+0xde>
 524:	44 0f       	add	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_vconnectpullup+0xda>
 52c:	ba 01       	movw	r22, r20
 52e:	62 2b       	or	r22, r18
 530:	62 bb       	out	0x12, r22	; 18
 532:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	ac 01       	movw	r20, r24
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_vconnectpullup+0xf8>
 53e:	44 0f       	add	r20, r20
 540:	55 1f       	adc	r21, r21
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_vconnectpullup+0xf4>
 546:	ba 01       	movw	r22, r20
 548:	60 95       	com	r22
 54a:	62 23       	and	r22, r18
 54c:	62 bb       	out	0x12, r22	; 18
 54e:	08 95       	ret

00000550 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
 550:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	81 f0       	breq	.+32     	; 0x576 <write_low_nibble+0x26>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	18 f4       	brcc	.+6      	; 0x560 <write_low_nibble+0x10>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	f1 f4       	brne	.+60     	; 0x59a <write_low_nibble+0x4a>
 55e:	05 c0       	rjmp	.+10     	; 0x56a <write_low_nibble+0x1a>
 560:	83 34       	cpi	r24, 0x43	; 67
 562:	79 f0       	breq	.+30     	; 0x582 <write_low_nibble+0x32>
 564:	84 34       	cpi	r24, 0x44	; 68
 566:	c9 f4       	brne	.+50     	; 0x59a <write_low_nibble+0x4a>
 568:	12 c0       	rjmp	.+36     	; 0x58e <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
 56a:	8b b3       	in	r24, 0x1b	; 27
 56c:	80 7f       	andi	r24, 0xF0	; 240
 56e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 570:	8b b3       	in	r24, 0x1b	; 27
 572:	86 2b       	or	r24, r22
 574:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 576:	88 b3       	in	r24, 0x18	; 24
 578:	80 7f       	andi	r24, 0xF0	; 240
 57a:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 57c:	88 b3       	in	r24, 0x18	; 24
 57e:	86 2b       	or	r24, r22
 580:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 582:	85 b3       	in	r24, 0x15	; 21
 584:	80 7f       	andi	r24, 0xF0	; 240
 586:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 588:	85 b3       	in	r24, 0x15	; 21
 58a:	86 2b       	or	r24, r22
 58c:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 58e:	82 b3       	in	r24, 0x12	; 18
 590:	80 7f       	andi	r24, 0xF0	; 240
 592:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 594:	82 b3       	in	r24, 0x12	; 18
 596:	68 2b       	or	r22, r24
 598:	62 bb       	out	0x12, r22	; 18
 59a:	08 95       	ret

0000059c <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 59c:	62 95       	swap	r22
 59e:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 5a0:	82 34       	cpi	r24, 0x42	; 66
 5a2:	81 f0       	breq	.+32     	; 0x5c4 <write_high_nibble+0x28>
 5a4:	83 34       	cpi	r24, 0x43	; 67
 5a6:	18 f4       	brcc	.+6      	; 0x5ae <write_high_nibble+0x12>
 5a8:	81 34       	cpi	r24, 0x41	; 65
 5aa:	f1 f4       	brne	.+60     	; 0x5e8 <write_high_nibble+0x4c>
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <write_high_nibble+0x1c>
 5ae:	83 34       	cpi	r24, 0x43	; 67
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <write_high_nibble+0x34>
 5b2:	84 34       	cpi	r24, 0x44	; 68
 5b4:	c9 f4       	brne	.+50     	; 0x5e8 <write_high_nibble+0x4c>
 5b6:	12 c0       	rjmp	.+36     	; 0x5dc <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
 5b8:	8b b3       	in	r24, 0x1b	; 27
 5ba:	8f 70       	andi	r24, 0x0F	; 15
 5bc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 5be:	8b b3       	in	r24, 0x1b	; 27
 5c0:	86 2b       	or	r24, r22
 5c2:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 5c4:	88 b3       	in	r24, 0x18	; 24
 5c6:	8f 70       	andi	r24, 0x0F	; 15
 5c8:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 5ca:	88 b3       	in	r24, 0x18	; 24
 5cc:	86 2b       	or	r24, r22
 5ce:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 5d0:	85 b3       	in	r24, 0x15	; 21
 5d2:	8f 70       	andi	r24, 0x0F	; 15
 5d4:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 5d6:	85 b3       	in	r24, 0x15	; 21
 5d8:	86 2b       	or	r24, r22
 5da:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 5dc:	82 b3       	in	r24, 0x12	; 18
 5de:	8f 70       	andi	r24, 0x0F	; 15
 5e0:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 5e2:	82 b3       	in	r24, 0x12	; 18
 5e4:	68 2b       	or	r22, r24
 5e6:	62 bb       	out	0x12, r22	; 18
 5e8:	08 95       	ret

000005ea <main>:
#include <util/delay.h>
#include "keypad_driver.h"
#include "LCD.h"
int main(void)
{
	LCD_init();
 5ea:	0e 94 11 04 	call	0x822	; 0x822 <LCD_init>
	keypad_init();
 5ee:	0e 94 09 03 	call	0x612	; 0x612 <keypad_init>
	char x;
    while(1)
    {
		x=keypad_check_press();
 5f2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <keypad_check_press>
		if(x!=0xff)
 5f6:	8f 3f       	cpi	r24, 0xFF	; 255
 5f8:	11 f0       	breq	.+4      	; 0x5fe <main+0x14>
		{
			LCD_SEND_CHAR(x);
 5fa:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_SEND_CHAR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fe:	8f e7       	ldi	r24, 0x7F	; 127
 600:	9a e1       	ldi	r25, 0x1A	; 26
 602:	a6 e0       	ldi	r26, 0x06	; 6
 604:	81 50       	subi	r24, 0x01	; 1
 606:	90 40       	sbci	r25, 0x00	; 0
 608:	a0 40       	sbci	r26, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <main+0x1a>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0x24>
 60e:	00 00       	nop
 610:	f0 cf       	rjmp	.-32     	; 0x5f2 <main+0x8>

00000612 <keypad_init>:

#include "keypad_driver.h"

void  keypad_init(void)
{
	set_pin_dir(keypad_port,0,1);
 612:	84 e4       	ldi	r24, 0x44	; 68
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	41 e0       	ldi	r20, 0x01	; 1
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,1,1);
 622:	84 e4       	ldi	r24, 0x44	; 68
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	61 e0       	ldi	r22, 0x01	; 1
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	50 e0       	ldi	r21, 0x00	; 0
 62e:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,2,1);
 632:	84 e4       	ldi	r24, 0x44	; 68
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	62 e0       	ldi	r22, 0x02	; 2
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,3,1);
 642:	84 e4       	ldi	r24, 0x44	; 68
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	63 e0       	ldi	r22, 0x03	; 3
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	41 e0       	ldi	r20, 0x01	; 1
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	
	set_pin_dir(keypad_port,4,0);
 652:	84 e4       	ldi	r24, 0x44	; 68
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	64 e0       	ldi	r22, 0x04	; 4
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	40 e0       	ldi	r20, 0x00	; 0
 65c:	50 e0       	ldi	r21, 0x00	; 0
 65e:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,5,0);
 662:	84 e4       	ldi	r24, 0x44	; 68
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	65 e0       	ldi	r22, 0x05	; 5
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	40 e0       	ldi	r20, 0x00	; 0
 66c:	50 e0       	ldi	r21, 0x00	; 0
 66e:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,6,0);
 672:	84 e4       	ldi	r24, 0x44	; 68
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	66 e0       	ldi	r22, 0x06	; 6
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	40 e0       	ldi	r20, 0x00	; 0
 67c:	50 e0       	ldi	r21, 0x00	; 0
 67e:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,7,0);
 682:	84 e4       	ldi	r24, 0x44	; 68
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	67 e0       	ldi	r22, 0x07	; 7
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	50 e0       	ldi	r21, 0x00	; 0
 68e:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	
	DIO_vconnectpullup(keypad_port,4,1);
 692:	84 e4       	ldi	r24, 0x44	; 68
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	64 e0       	ldi	r22, 0x04	; 4
 698:	70 e0       	ldi	r23, 0x00	; 0
 69a:	41 e0       	ldi	r20, 0x01	; 1
 69c:	50 e0       	ldi	r21, 0x00	; 0
 69e:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	DIO_vconnectpullup(keypad_port,5,1);
 6a2:	84 e4       	ldi	r24, 0x44	; 68
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	65 e0       	ldi	r22, 0x05	; 5
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	41 e0       	ldi	r20, 0x01	; 1
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	DIO_vconnectpullup(keypad_port,6,1);
 6b2:	84 e4       	ldi	r24, 0x44	; 68
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	66 e0       	ldi	r22, 0x06	; 6
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	50 e0       	ldi	r21, 0x00	; 0
 6be:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	DIO_vconnectpullup(keypad_port,7,1);
 6c2:	84 e4       	ldi	r24, 0x44	; 68
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	67 e0       	ldi	r22, 0x07	; 7
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	41 e0       	ldi	r20, 0x01	; 1
 6cc:	50 e0       	ldi	r21, 0x00	; 0
 6ce:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
}
 6d2:	08 95       	ret

000006d4 <keypad_check_press>:

unsigned char keypad_check_press(void)
{
 6d4:	af 92       	push	r10
 6d6:	bf 92       	push	r11
 6d8:	cf 92       	push	r12
 6da:	df 92       	push	r13
 6dc:	ef 92       	push	r14
 6de:	ff 92       	push	r15
 6e0:	0f 93       	push	r16
 6e2:	1f 93       	push	r17
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62
 6ec:	60 97       	sbiw	r28, 0x10	; 16
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4]={{'7','8','9','/'}, {'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 6f8:	de 01       	movw	r26, r28
 6fa:	11 96       	adiw	r26, 0x01	; 1
 6fc:	e0 e6       	ldi	r30, 0x60	; 96
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 e1       	ldi	r24, 0x10	; 16
 702:	01 90       	ld	r0, Z+
 704:	0d 92       	st	X+, r0
 706:	81 50       	subi	r24, 0x01	; 1
 708:	e1 f7       	brne	.-8      	; 0x702 <keypad_check_press+0x2e>
 70a:	ee 24       	eor	r14, r14
 70c:	ff 24       	eor	r15, r15
	char row , col, x;
	char return_val=not_pressed;
	for(row=0;row<=3;row++)
	{
		DIO_write(keypad_port,0,1);
 70e:	84 e4       	ldi	r24, 0x44	; 68
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	41 e0       	ldi	r20, 0x01	; 1
 718:	50 e0       	ldi	r21, 0x00	; 0
 71a:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
		DIO_write(keypad_port,1,1);
 71e:	84 e4       	ldi	r24, 0x44	; 68
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	61 e0       	ldi	r22, 0x01	; 1
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	41 e0       	ldi	r20, 0x01	; 1
 728:	50 e0       	ldi	r21, 0x00	; 0
 72a:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
		DIO_write(keypad_port,2,1);
 72e:	84 e4       	ldi	r24, 0x44	; 68
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	62 e0       	ldi	r22, 0x02	; 2
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	41 e0       	ldi	r20, 0x01	; 1
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
		DIO_write(keypad_port,3,1);
 73e:	84 e4       	ldi	r24, 0x44	; 68
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	63 e0       	ldi	r22, 0x03	; 3
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	41 e0       	ldi	r20, 0x01	; 1
 748:	50 e0       	ldi	r21, 0x00	; 0
 74a:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
		
		DIO_write(keypad_port,row,0);
 74e:	57 01       	movw	r10, r14
 750:	84 e4       	ldi	r24, 0x44	; 68
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	b7 01       	movw	r22, r14
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
 75e:	00 e0       	ldi	r16, 0x00	; 0
 760:	10 e0       	ldi	r17, 0x00	; 0
		for(col=0;col<=3;col++)
		{
			x=DIO_read(keypad_port,(col+4));
 762:	68 01       	movw	r12, r16
	DIO_vconnectpullup(keypad_port,5,1);
	DIO_vconnectpullup(keypad_port,6,1);
	DIO_vconnectpullup(keypad_port,7,1);
}

unsigned char keypad_check_press(void)
 764:	b8 01       	movw	r22, r16
 766:	6c 5f       	subi	r22, 0xFC	; 252
 768:	7f 4f       	sbci	r23, 0xFF	; 255
		DIO_write(keypad_port,3,1);
		
		DIO_write(keypad_port,row,0);
		for(col=0;col<=3;col++)
		{
			x=DIO_read(keypad_port,(col+4));
 76a:	84 e4       	ldi	r24, 0x44	; 68
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_read>
			if(x==0)
 772:	88 23       	and	r24, r24
 774:	61 f4       	brne	.+24     	; 0x78e <keypad_check_press+0xba>
			{
				return_val=arr[row][col];
 776:	f5 01       	movw	r30, r10
 778:	ee 0f       	add	r30, r30
 77a:	ff 1f       	adc	r31, r31
 77c:	ee 0f       	add	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	ce 0e       	add	r12, r30
 782:	df 1e       	adc	r13, r31
 784:	fe 01       	movw	r30, r28
 786:	ec 0d       	add	r30, r12
 788:	fd 1d       	adc	r31, r13
 78a:	81 81       	ldd	r24, Z+1	; 0x01
 78c:	06 c0       	rjmp	.+12     	; 0x79a <keypad_check_press+0xc6>
 78e:	0f 5f       	subi	r16, 0xFF	; 255
 790:	1f 4f       	sbci	r17, 0xFF	; 255
		DIO_write(keypad_port,1,1);
		DIO_write(keypad_port,2,1);
		DIO_write(keypad_port,3,1);
		
		DIO_write(keypad_port,row,0);
		for(col=0;col<=3;col++)
 792:	04 30       	cpi	r16, 0x04	; 4
 794:	11 05       	cpc	r17, r1
 796:	29 f7       	brne	.-54     	; 0x762 <keypad_check_press+0x8e>
 798:	11 c0       	rjmp	.+34     	; 0x7bc <keypad_check_press+0xe8>
		{
			break;
		}
	}
	return return_val;
 79a:	60 96       	adiw	r28, 0x10	; 16
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	f8 94       	cli
 7a0:	de bf       	out	0x3e, r29	; 62
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	cd bf       	out	0x3d, r28	; 61
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	ff 90       	pop	r15
 7b0:	ef 90       	pop	r14
 7b2:	df 90       	pop	r13
 7b4:	cf 90       	pop	r12
 7b6:	bf 90       	pop	r11
 7b8:	af 90       	pop	r10
 7ba:	08 95       	ret
		if(x==0)
		{
			break;
		}
	}
	return return_val;
 7bc:	08 94       	sec
 7be:	e1 1c       	adc	r14, r1
 7c0:	f1 1c       	adc	r15, r1
unsigned char keypad_check_press(void)
{
	unsigned char arr[4][4]={{'7','8','9','/'}, {'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	char row , col, x;
	char return_val=not_pressed;
	for(row=0;row<=3;row++)
 7c2:	84 e0       	ldi	r24, 0x04	; 4
 7c4:	e8 16       	cp	r14, r24
 7c6:	f1 04       	cpc	r15, r1
 7c8:	09 f0       	breq	.+2      	; 0x7cc <keypad_check_press+0xf8>
 7ca:	a1 cf       	rjmp	.-190    	; 0x70e <keypad_check_press+0x3a>
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	e5 cf       	rjmp	.-54     	; 0x79a <keypad_check_press+0xc6>

000007d0 <enable>:
	#endif
}

static void enable(void)
{
	DIO_write(lcd_control_port,EN,1);
 7d0:	82 e4       	ldi	r24, 0x42	; 66
 7d2:	60 e0       	ldi	r22, 0x00	; 0
 7d4:	41 e0       	ldi	r20, 0x01	; 1
 7d6:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
 7da:	8f e9       	ldi	r24, 0x9F	; 159
 7dc:	9f e0       	ldi	r25, 0x0F	; 15
 7de:	01 97       	sbiw	r24, 0x01	; 1
 7e0:	f1 f7       	brne	.-4      	; 0x7de <enable+0xe>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <enable+0x14>
 7e4:	00 00       	nop
	_delay_ms(2);
	DIO_write(lcd_control_port,EN,0);
 7e6:	82 e4       	ldi	r24, 0x42	; 66
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	40 e0       	ldi	r20, 0x00	; 0
 7ec:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
 7f0:	8f e9       	ldi	r24, 0x9F	; 159
 7f2:	9f e0       	ldi	r25, 0x0F	; 15
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <enable+0x24>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <enable+0x2a>
 7fa:	00 00       	nop
	_delay_ms(2);
}
 7fc:	08 95       	ret

000007fe <LCD_SEND_CMD>:

void LCD_SEND_CMD(char cmd)
{
 7fe:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port(lcd_data_port,cmd);
 800:	81 e4       	ldi	r24, 0x41	; 65
 802:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_write_port>
	DIO_write(lcd_control_port,RS,0);
 806:	82 e4       	ldi	r24, 0x42	; 66
 808:	61 e0       	ldi	r22, 0x01	; 1
 80a:	40 e0       	ldi	r20, 0x00	; 0
 80c:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	enable();
 810:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <enable>
 814:	8f ec       	ldi	r24, 0xCF	; 207
 816:	97 e0       	ldi	r25, 0x07	; 7
 818:	01 97       	sbiw	r24, 0x01	; 1
 81a:	f1 f7       	brne	.-4      	; 0x818 <LCD_SEND_CMD+0x1a>
 81c:	00 c0       	rjmp	.+0      	; 0x81e <LCD_SEND_CMD+0x20>
 81e:	00 00       	nop
	DIO_write(lcd_control_port,RS, 0);
	enable();
	_delay_ms(1);
	#endif
	_delay_ms(1);
}
 820:	08 95       	ret

00000822 <LCD_init>:
 822:	8f ef       	ldi	r24, 0xFF	; 255
 824:	91 ee       	ldi	r25, 0xE1	; 225
 826:	a4 e0       	ldi	r26, 0x04	; 4
 828:	81 50       	subi	r24, 0x01	; 1
 82a:	90 40       	sbci	r25, 0x00	; 0
 82c:	a0 40       	sbci	r26, 0x00	; 0
 82e:	e1 f7       	brne	.-8      	; 0x828 <LCD_init+0x6>
 830:	00 c0       	rjmp	.+0      	; 0x832 <LCD_init+0x10>
 832:	00 00       	nop

void LCD_init(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	set_pin_dir(lcd_data_port,0,1);
 834:	81 e4       	ldi	r24, 0x41	; 65
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	41 e0       	ldi	r20, 0x01	; 1
 83a:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,1,1);
 83e:	81 e4       	ldi	r24, 0x41	; 65
 840:	61 e0       	ldi	r22, 0x01	; 1
 842:	41 e0       	ldi	r20, 0x01	; 1
 844:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,2,1);
 848:	81 e4       	ldi	r24, 0x41	; 65
 84a:	62 e0       	ldi	r22, 0x02	; 2
 84c:	41 e0       	ldi	r20, 0x01	; 1
 84e:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,3,1);
 852:	81 e4       	ldi	r24, 0x41	; 65
 854:	63 e0       	ldi	r22, 0x03	; 3
 856:	41 e0       	ldi	r20, 0x01	; 1
 858:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,4,1);
 85c:	81 e4       	ldi	r24, 0x41	; 65
 85e:	64 e0       	ldi	r22, 0x04	; 4
 860:	41 e0       	ldi	r20, 0x01	; 1
 862:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,5,1);
 866:	81 e4       	ldi	r24, 0x41	; 65
 868:	65 e0       	ldi	r22, 0x05	; 5
 86a:	41 e0       	ldi	r20, 0x01	; 1
 86c:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,6,1);
 870:	81 e4       	ldi	r24, 0x41	; 65
 872:	66 e0       	ldi	r22, 0x06	; 6
 874:	41 e0       	ldi	r20, 0x01	; 1
 876:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,7,1);
 87a:	81 e4       	ldi	r24, 0x41	; 65
 87c:	67 e0       	ldi	r22, 0x07	; 7
 87e:	41 e0       	ldi	r20, 0x01	; 1
 880:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_control_port,EN,1);
 884:	82 e4       	ldi	r24, 0x42	; 66
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	41 e0       	ldi	r20, 0x01	; 1
 88a:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_control_port,RW,1);
 88e:	82 e4       	ldi	r24, 0x42	; 66
 890:	62 e0       	ldi	r22, 0x02	; 2
 892:	41 e0       	ldi	r20, 0x01	; 1
 894:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_control_port,RS,1);
 898:	82 e4       	ldi	r24, 0x42	; 66
 89a:	61 e0       	ldi	r22, 0x01	; 1
 89c:	41 e0       	ldi	r20, 0x01	; 1
 89e:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	DIO_write(lcd_control_port,RW,0);
 8a2:	82 e4       	ldi	r24, 0x42	; 66
 8a4:	62 e0       	ldi	r22, 0x02	; 2
 8a6:	40 e0       	ldi	r20, 0x00	; 0
 8a8:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	LCD_SEND_CMD(EIGHT_BITS);
 8ac:	88 e3       	ldi	r24, 0x38	; 56
 8ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SEND_CMD>
 8b2:	af ec       	ldi	r26, 0xCF	; 207
 8b4:	b7 e0       	ldi	r27, 0x07	; 7
 8b6:	11 97       	sbiw	r26, 0x01	; 1
 8b8:	f1 f7       	brne	.-4      	; 0x8b6 <__stack+0x57>
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <__stack+0x5d>
 8bc:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CURSOR_ON_DISPLAY_ON); 
 8be:	8e e0       	ldi	r24, 0x0E	; 14
 8c0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SEND_CMD>
 8c4:	8f ec       	ldi	r24, 0xCF	; 207
 8c6:	97 e0       	ldi	r25, 0x07	; 7
 8c8:	01 97       	sbiw	r24, 0x01	; 1
 8ca:	f1 f7       	brne	.-4      	; 0x8c8 <__stack+0x69>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <__stack+0x6f>
 8ce:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CLR_SCREEN);
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SEND_CMD>
 8d6:	af e1       	ldi	r26, 0x1F	; 31
 8d8:	be e4       	ldi	r27, 0x4E	; 78
 8da:	11 97       	sbiw	r26, 0x01	; 1
 8dc:	f1 f7       	brne	.-4      	; 0x8da <__stack+0x7b>
 8de:	00 c0       	rjmp	.+0      	; 0x8e0 <__stack+0x81>
 8e0:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(ENTY_MODE);
 8e2:	86 e0       	ldi	r24, 0x06	; 6
 8e4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SEND_CMD>
 8e8:	8f ec       	ldi	r24, 0xCF	; 207
 8ea:	97 e0       	ldi	r25, 0x07	; 7
 8ec:	01 97       	sbiw	r24, 0x01	; 1
 8ee:	f1 f7       	brne	.-4      	; 0x8ec <__stack+0x8d>
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <__stack+0x93>
 8f2:	00 00       	nop
	LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(10);
	LCD_SEND_CMD(ENTY_MODE);
	_delay_ms(1);
	#endif
}
 8f4:	08 95       	ret

000008f6 <LCD_SEND_CHAR>:
	_delay_ms(1);
}


void LCD_SEND_CHAR(char data)
{
 8f6:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port(lcd_data_port,data);
 8f8:	81 e4       	ldi	r24, 0x41	; 65
 8fa:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_write_port>
	DIO_write(lcd_control_port,RS,1);
 8fe:	82 e4       	ldi	r24, 0x42	; 66
 900:	61 e0       	ldi	r22, 0x01	; 1
 902:	41 e0       	ldi	r20, 0x01	; 1
 904:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	enable();
 908:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <enable>
 90c:	8f ec       	ldi	r24, 0xCF	; 207
 90e:	97 e0       	ldi	r25, 0x07	; 7
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	f1 f7       	brne	.-4      	; 0x910 <LCD_SEND_CHAR+0x1a>
 914:	00 c0       	rjmp	.+0      	; 0x916 <LCD_SEND_CHAR+0x20>
 916:	00 00       	nop
	enable();
	_delay_ms(1);
	#endif

	_delay_ms(1);
}
 918:	08 95       	ret

0000091a <LCD_SEND_STRING>:

void LCD_SEND_STRING(char *data)
{
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 920:	88 81       	ld	r24, Y
 922:	88 23       	and	r24, r24
 924:	31 f0       	breq	.+12     	; 0x932 <LCD_SEND_STRING+0x18>
	#endif

	_delay_ms(1);
}

void LCD_SEND_STRING(char *data)
 926:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_SEND_CHAR(*data);
 928:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_SEND_CHAR>
	_delay_ms(1);
}

void LCD_SEND_STRING(char *data)
{
	while((*data)!='\0')
 92c:	89 91       	ld	r24, Y+
 92e:	88 23       	and	r24, r24
 930:	d9 f7       	brne	.-10     	; 0x928 <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*data);
		data++;
	}
}
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	08 95       	ret

00000938 <LCD_clearscreen>:

void LCD_clearscreen()
{
	LCD_SEND_CMD(CLR_SCREEN);
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SEND_CMD>
 93e:	8f e1       	ldi	r24, 0x1F	; 31
 940:	9e e4       	ldi	r25, 0x4E	; 78
 942:	01 97       	sbiw	r24, 0x01	; 1
 944:	f1 f7       	brne	.-4      	; 0x942 <LCD_clearscreen+0xa>
 946:	00 c0       	rjmp	.+0      	; 0x948 <LCD_clearscreen+0x10>
 948:	00 00       	nop
	_delay_ms(10);
}
 94a:	08 95       	ret

0000094c <LCD_MOVE_CURSOR>:

void LCD_MOVE_CURSOR(char row , char col)
{
	char data;
	if(row<1 || row>2 || col<1 || col>16)
 94c:	28 2f       	mov	r18, r24
 94e:	21 50       	subi	r18, 0x01	; 1
 950:	22 30       	cpi	r18, 0x02	; 2
 952:	70 f4       	brcc	.+28     	; 0x970 <LCD_MOVE_CURSOR+0x24>
 954:	66 23       	and	r22, r22
 956:	71 f0       	breq	.+28     	; 0x974 <LCD_MOVE_CURSOR+0x28>
 958:	61 31       	cpi	r22, 0x11	; 17
 95a:	70 f4       	brcc	.+28     	; 0x978 <LCD_MOVE_CURSOR+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 95c:	81 30       	cpi	r24, 0x01	; 1
 95e:	19 f4       	brne	.+6      	; 0x966 <LCD_MOVE_CURSOR+0x1a>
	{
		data=0x80+col-1;
 960:	96 2f       	mov	r25, r22
 962:	91 58       	subi	r25, 0x81	; 129
 964:	0a c0       	rjmp	.+20     	; 0x97a <LCD_MOVE_CURSOR+0x2e>
	}
	else if(row==2)
 966:	82 30       	cpi	r24, 0x02	; 2
 968:	41 f4       	brne	.+16     	; 0x97a <LCD_MOVE_CURSOR+0x2e>
	{
		data=0xc0+col-1;
 96a:	96 2f       	mov	r25, r22
 96c:	91 54       	subi	r25, 0x41	; 65
 96e:	05 c0       	rjmp	.+10     	; 0x97a <LCD_MOVE_CURSOR+0x2e>
void LCD_MOVE_CURSOR(char row , char col)
{
	char data;
	if(row<1 || row>2 || col<1 || col>16)
	{
		data=0x80;
 970:	90 e8       	ldi	r25, 0x80	; 128
 972:	03 c0       	rjmp	.+6      	; 0x97a <LCD_MOVE_CURSOR+0x2e>
 974:	90 e8       	ldi	r25, 0x80	; 128
 976:	01 c0       	rjmp	.+2      	; 0x97a <LCD_MOVE_CURSOR+0x2e>
 978:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(row==2)
	{
		data=0xc0+col-1;
	}
	LCD_SEND_CMD(data);
 97a:	89 2f       	mov	r24, r25
 97c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_SEND_CMD>
 980:	8f ec       	ldi	r24, 0xCF	; 207
 982:	97 e0       	ldi	r25, 0x07	; 7
 984:	01 97       	sbiw	r24, 0x01	; 1
 986:	f1 f7       	brne	.-4      	; 0x984 <LCD_MOVE_CURSOR+0x38>
 988:	00 c0       	rjmp	.+0      	; 0x98a <LCD_MOVE_CURSOR+0x3e>
 98a:	00 00       	nop
	_delay_ms(1);
}
 98c:	08 95       	ret

0000098e <_exit>:
 98e:	f8 94       	cli

00000990 <__stop_program>:
 990:	ff cf       	rjmp	.-2      	; 0x990 <__stop_program>
